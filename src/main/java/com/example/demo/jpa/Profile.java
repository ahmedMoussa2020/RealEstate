package com.example.demo.jpa;

import java.io.Serializable;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;
import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;

// annotation marks this class as a persistent entity in the database. This means that objects of this class will be saved as rows in the corresponding database table.
@Entity
// The @Table annotation is used to specify the name of the database table associated with this entity. In this case, the name of the table is Profile.
@Table(name = "\"Profile\"") 
public class Profile implements Serializable {

	// This is a unique identifier for the class version used for serialization and deserialization.
	private static final long serialVersionUID = 1L;
	
	@Id // @Id: This annotation specifies that this field is the primary key of the database table.
	// specifies that the value of the primary key is automatically generated by the database.
	// "strategy" parameter that specifies the generation strategy. Here, the strategy is GenerationType.IDENTITY.
	@GeneratedValue(strategy=GenerationType.IDENTITY) 
	// @Column: This annotation specifies the mapping of the annotated field to a column in the database table. Here, the column name is profileId.
	@Column(name="\"profileId\"")
	// @JsonProperty : This annotation is used to customize the serialization and deserialization of the field when converting the entity to JSON.  Here, the access parameter is set to WRITE_ONLY, which means that the field will only be serialized and not deserialized.
	@JsonProperty(access = Access.WRITE_ONLY)
	private Integer profileId;
	private String bio;
	private String city;
	private String country;
	private String headline;

	@Column(columnDefinition="TEXT") // you are telling JPA to create a database column with a "TEXT" data type, 
	private String picture;
	
	@OneToOne
	@JsonIgnore
	// @JoinColumn : This annotation is used in JPA entity classes to specify the column that joins two entities in a database relationship. In this case, the annotation is used to specify the join column for the Profile entity's relationship with the User entity using the foreign key column userId.
	@JoinColumn(name="\"userId\"")
	private User user;
	
	public Profile() {
	}

	public Integer getProfileId() {
		return profileId;
	}

	public void setProfileId(Integer profileId) {
		this.profileId = profileId;
	}

	public String getBio() {
		return bio;
	}

	public void setBio(String bio) {
		this.bio = bio;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public String getHeadline() {
		return headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	public String getPicture() {
		return picture;
	}

	public void setPicture(String picture) {
		this.picture = picture;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public String toString() {
		return "Profile [profileId=" + profileId + ", bio=" + bio + ", city=" + city + ", country=" + country
				+ ", headline=" + headline + ", picture=" + picture + "]";
	}
	
	
}